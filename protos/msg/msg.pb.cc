// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msg {
PROTOBUF_CONSTEXPR Variable::Variable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct VariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariableDefaultTypeInternal() {}
  union {
    Variable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariableDefaultTypeInternal _Variable_default_instance_;
PROTOBUF_CONSTEXPR ItemValue::ItemValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.n_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.v_)*/nullptr
  , /*decltype(_impl_.t_)*/int64_t{0}
  , /*decltype(_impl_.q_)*/0
  , /*decltype(_impl_.dt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemValueDefaultTypeInternal() {}
  union {
    ItemValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemValueDefaultTypeInternal _ItemValue_default_instance_;
PROTOBUF_CONSTEXPR BlockItemValue::BlockItemValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.msgid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockItemValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockItemValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockItemValueDefaultTypeInternal() {}
  union {
    BlockItemValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockItemValueDefaultTypeInternal _BlockItemValue_default_instance_;
}  // namespace msg
static ::_pb::Metadata file_level_metadata_msg_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Variable, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::msg::Variable, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::msg::Variable, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ItemValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ItemValue, _impl_.n_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemValue, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemValue, _impl_.q_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemValue, _impl_.dt_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemValue, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemValue, _impl_.nid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::BlockItemValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::BlockItemValue, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::msg::BlockItemValue, _impl_.values_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msg::Variable)},
  { 23, -1, -1, sizeof(::msg::ItemValue)},
  { 35, -1, -1, sizeof(::msg::BlockItemValue)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msg::_Variable_default_instance_._instance,
  &::msg::_ItemValue_default_instance_._instance,
  &::msg::_BlockItemValue_default_instance_._instance,
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\003msg\"\377\001\n\010Variable\022\013\n\001b\030\001 \001(\010"
  "H\000\022\013\n\001c\030\002 \001(\021H\000\022\014\n\002bt\030\003 \001(\rH\000\022\014\n\002wc\030\004 \001("
  "\021H\000\022\r\n\003i16\030\005 \001(\021H\000\022\r\n\003u16\030\006 \001(\rH\000\022\r\n\003i32"
  "\030\007 \001(\021H\000\022\r\n\003u32\030\010 \001(\rH\000\022\r\n\003i64\030\t \001(\022H\000\022\r"
  "\n\003u64\030\n \001(\004H\000\022\r\n\003f32\030\013 \001(\002H\000\022\r\n\003f64\030\014 \001("
  "\001H\000\022\r\n\003str\030\r \001(\tH\000\022\013\n\001t\030\016 \001(\003H\000\022\020\n\006strea"
  "m\030\017 \001(\014H\000\022\016\n\004blob\030\020 \001(\014H\000B\007\n\005value\"o\n\tIt"
  "emValue\022\t\n\001n\030\001 \001(\t\022\t\n\001t\030\002 \001(\003\022\t\n\001q\030\003 \001(\005"
  "\022\032\n\002dt\030\004 \001(\0162\016.msg.ITEM_TYPE\022\030\n\001v\030\005 \001(\0132"
  "\r.msg.Variable\022\013\n\003nid\030\006 \001(\t\"\?\n\016BlockItem"
  "Value\022\r\n\005MsgId\030\001 \001(\004\022\036\n\006Values\030\002 \003(\0132\016.m"
  "sg.ItemValue*\265\001\n\tITEM_TYPE\022\t\n\005EMPTY\020\000\022\010\n"
  "\004BOOL\020\001\022\010\n\004CHAR\020\002\022\010\n\004BYTE\020\003\022\t\n\005INT16\020\004\022\n"
  "\n\006UINT16\020\005\022\t\n\005INT32\020\006\022\n\n\006UINT32\020\007\022\t\n\005INT"
  "64\020\010\022\n\n\006UINT64\020\t\022\013\n\007FLOAT32\020\n\022\013\n\007FLOAT64"
  "\020\013\022\n\n\006STRING\020\014\022\n\n\006STREAM\020\r\022\010\n\004BLOB\020\016b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_msg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_2eproto = {
    false, false, 644, descriptor_table_protodef_msg_2eproto,
    "msg.proto",
    &descriptor_table_msg_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
    file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto,
    file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEM_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool ITEM_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Variable::_Internal {
 public:
};

Variable::Variable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Variable)
}
Variable::Variable(const Variable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Variable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kB: {
      _this->_internal_set_b(from._internal_b());
      break;
    }
    case kC: {
      _this->_internal_set_c(from._internal_c());
      break;
    }
    case kBt: {
      _this->_internal_set_bt(from._internal_bt());
      break;
    }
    case kWc: {
      _this->_internal_set_wc(from._internal_wc());
      break;
    }
    case kI16: {
      _this->_internal_set_i16(from._internal_i16());
      break;
    }
    case kU16: {
      _this->_internal_set_u16(from._internal_u16());
      break;
    }
    case kI32: {
      _this->_internal_set_i32(from._internal_i32());
      break;
    }
    case kU32: {
      _this->_internal_set_u32(from._internal_u32());
      break;
    }
    case kI64: {
      _this->_internal_set_i64(from._internal_i64());
      break;
    }
    case kU64: {
      _this->_internal_set_u64(from._internal_u64());
      break;
    }
    case kF32: {
      _this->_internal_set_f32(from._internal_f32());
      break;
    }
    case kF64: {
      _this->_internal_set_f64(from._internal_f64());
      break;
    }
    case kStr: {
      _this->_internal_set_str(from._internal_str());
      break;
    }
    case kT: {
      _this->_internal_set_t(from._internal_t());
      break;
    }
    case kStream: {
      _this->_internal_set_stream(from._internal_stream());
      break;
    }
    case kBlob: {
      _this->_internal_set_blob(from._internal_blob());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:msg.Variable)
}

inline void Variable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

Variable::~Variable() {
  // @@protoc_insertion_point(destructor:msg.Variable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Variable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Variable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Variable::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:msg.Variable)
  switch (value_case()) {
    case kB: {
      // No need to clear
      break;
    }
    case kC: {
      // No need to clear
      break;
    }
    case kBt: {
      // No need to clear
      break;
    }
    case kWc: {
      // No need to clear
      break;
    }
    case kI16: {
      // No need to clear
      break;
    }
    case kU16: {
      // No need to clear
      break;
    }
    case kI32: {
      // No need to clear
      break;
    }
    case kU32: {
      // No need to clear
      break;
    }
    case kI64: {
      // No need to clear
      break;
    }
    case kU64: {
      // No need to clear
      break;
    }
    case kF32: {
      // No need to clear
      break;
    }
    case kF64: {
      // No need to clear
      break;
    }
    case kStr: {
      _impl_.value_.str_.Destroy();
      break;
    }
    case kT: {
      // No need to clear
      break;
    }
    case kStream: {
      _impl_.value_.stream_.Destroy();
      break;
    }
    case kBlob: {
      _impl_.value_.blob_.Destroy();
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Variable::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Variable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Variable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool b = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_c(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_bt(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 wc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_wc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 i16 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_i16(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 u16 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_u16(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 i32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_i32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 u32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _internal_set_u32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 i64 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_i64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 u64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _internal_set_u64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float f32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _internal_set_f32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double f64 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _internal_set_f64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string str = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Variable.str"));
        } else
          goto handle_unusual;
        continue;
      // int64 t = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _internal_set_t(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes stream = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_stream();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes blob = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Variable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Variable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool b = 1;
  if (_internal_has_b()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_b(), target);
  }

  // sint32 c = 2;
  if (_internal_has_c()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_c(), target);
  }

  // uint32 bt = 3;
  if (_internal_has_bt()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bt(), target);
  }

  // sint32 wc = 4;
  if (_internal_has_wc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_wc(), target);
  }

  // sint32 i16 = 5;
  if (_internal_has_i16()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_i16(), target);
  }

  // uint32 u16 = 6;
  if (_internal_has_u16()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_u16(), target);
  }

  // sint32 i32 = 7;
  if (_internal_has_i32()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(7, this->_internal_i32(), target);
  }

  // uint32 u32 = 8;
  if (_internal_has_u32()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_u32(), target);
  }

  // sint64 i64 = 9;
  if (_internal_has_i64()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(9, this->_internal_i64(), target);
  }

  // uint64 u64 = 10;
  if (_internal_has_u64()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_u64(), target);
  }

  // float f32 = 11;
  if (_internal_has_f32()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_f32(), target);
  }

  // double f64 = 12;
  if (_internal_has_f64()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_f64(), target);
  }

  // string str = 13;
  if (_internal_has_str()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Variable.str");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_str(), target);
  }

  // int64 t = 14;
  if (_internal_has_t()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_t(), target);
  }

  // bytes stream = 15;
  if (_internal_has_stream()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_stream(), target);
  }

  // bytes blob = 16;
  if (_internal_has_blob()) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Variable)
  return target;
}

size_t Variable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Variable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // bool b = 1;
    case kB: {
      total_size += 1 + 1;
      break;
    }
    // sint32 c = 2;
    case kC: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_c());
      break;
    }
    // uint32 bt = 3;
    case kBt: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bt());
      break;
    }
    // sint32 wc = 4;
    case kWc: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_wc());
      break;
    }
    // sint32 i16 = 5;
    case kI16: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_i16());
      break;
    }
    // uint32 u16 = 6;
    case kU16: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_u16());
      break;
    }
    // sint32 i32 = 7;
    case kI32: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_i32());
      break;
    }
    // uint32 u32 = 8;
    case kU32: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_u32());
      break;
    }
    // sint64 i64 = 9;
    case kI64: {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_i64());
      break;
    }
    // uint64 u64 = 10;
    case kU64: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_u64());
      break;
    }
    // float f32 = 11;
    case kF32: {
      total_size += 1 + 4;
      break;
    }
    // double f64 = 12;
    case kF64: {
      total_size += 1 + 8;
      break;
    }
    // string str = 13;
    case kStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str());
      break;
    }
    // int64 t = 14;
    case kT: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_t());
      break;
    }
    // bytes stream = 15;
    case kStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_stream());
      break;
    }
    // bytes blob = 16;
    case kBlob: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_blob());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Variable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Variable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Variable::GetClassData() const { return &_class_data_; }


void Variable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Variable*>(&to_msg);
  auto& from = static_cast<const Variable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Variable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kB: {
      _this->_internal_set_b(from._internal_b());
      break;
    }
    case kC: {
      _this->_internal_set_c(from._internal_c());
      break;
    }
    case kBt: {
      _this->_internal_set_bt(from._internal_bt());
      break;
    }
    case kWc: {
      _this->_internal_set_wc(from._internal_wc());
      break;
    }
    case kI16: {
      _this->_internal_set_i16(from._internal_i16());
      break;
    }
    case kU16: {
      _this->_internal_set_u16(from._internal_u16());
      break;
    }
    case kI32: {
      _this->_internal_set_i32(from._internal_i32());
      break;
    }
    case kU32: {
      _this->_internal_set_u32(from._internal_u32());
      break;
    }
    case kI64: {
      _this->_internal_set_i64(from._internal_i64());
      break;
    }
    case kU64: {
      _this->_internal_set_u64(from._internal_u64());
      break;
    }
    case kF32: {
      _this->_internal_set_f32(from._internal_f32());
      break;
    }
    case kF64: {
      _this->_internal_set_f64(from._internal_f64());
      break;
    }
    case kStr: {
      _this->_internal_set_str(from._internal_str());
      break;
    }
    case kT: {
      _this->_internal_set_t(from._internal_t());
      break;
    }
    case kStream: {
      _this->_internal_set_stream(from._internal_stream());
      break;
    }
    case kBlob: {
      _this->_internal_set_blob(from._internal_blob());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Variable::CopyFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variable::IsInitialized() const {
  return true;
}

void Variable::InternalSwap(Variable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Variable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class ItemValue::_Internal {
 public:
  static const ::msg::Variable& v(const ItemValue* msg);
};

const ::msg::Variable&
ItemValue::_Internal::v(const ItemValue* msg) {
  return *msg->_impl_.v_;
}
ItemValue::ItemValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ItemValue)
}
ItemValue::ItemValue(const ItemValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.n_){}
    , decltype(_impl_.nid_){}
    , decltype(_impl_.v_){nullptr}
    , decltype(_impl_.t_){}
    , decltype(_impl_.q_){}
    , decltype(_impl_.dt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.n_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.n_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_n().empty()) {
    _this->_impl_.n_.Set(from._internal_n(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nid().empty()) {
    _this->_impl_.nid_.Set(from._internal_nid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_v()) {
    _this->_impl_.v_ = new ::msg::Variable(*from._impl_.v_);
  }
  ::memcpy(&_impl_.t_, &from._impl_.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dt_) -
    reinterpret_cast<char*>(&_impl_.t_)) + sizeof(_impl_.dt_));
  // @@protoc_insertion_point(copy_constructor:msg.ItemValue)
}

inline void ItemValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.n_){}
    , decltype(_impl_.nid_){}
    , decltype(_impl_.v_){nullptr}
    , decltype(_impl_.t_){int64_t{0}}
    , decltype(_impl_.q_){0}
    , decltype(_impl_.dt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.n_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.n_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ItemValue::~ItemValue() {
  // @@protoc_insertion_point(destructor:msg.ItemValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.n_.Destroy();
  _impl_.nid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.v_;
}

void ItemValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemValue::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ItemValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.n_.ClearToEmpty();
  _impl_.nid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.v_ != nullptr) {
    delete _impl_.v_;
  }
  _impl_.v_ = nullptr;
  ::memset(&_impl_.t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dt_) -
      reinterpret_cast<char*>(&_impl_.t_)) + sizeof(_impl_.dt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_n();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ItemValue.n"));
        } else
          goto handle_unusual;
        continue;
      // int64 t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 q = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.q_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.ITEM_TYPE dt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dt(static_cast<::msg::ITEM_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.Variable v = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_v(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_nid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ItemValue.nid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ItemValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string n = 1;
  if (!this->_internal_n().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_n().data(), static_cast<int>(this->_internal_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ItemValue.n");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_n(), target);
  }

  // int64 t = 2;
  if (this->_internal_t() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_t(), target);
  }

  // int32 q = 3;
  if (this->_internal_q() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_q(), target);
  }

  // .msg.ITEM_TYPE dt = 4;
  if (this->_internal_dt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_dt(), target);
  }

  // .msg.Variable v = 5;
  if (this->_internal_has_v()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::v(this),
        _Internal::v(this).GetCachedSize(), target, stream);
  }

  // string nid = 6;
  if (!this->_internal_nid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nid().data(), static_cast<int>(this->_internal_nid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ItemValue.nid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_nid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ItemValue)
  return target;
}

size_t ItemValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ItemValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string n = 1;
  if (!this->_internal_n().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_n());
  }

  // string nid = 6;
  if (!this->_internal_nid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nid());
  }

  // .msg.Variable v = 5;
  if (this->_internal_has_v()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.v_);
  }

  // int64 t = 2;
  if (this->_internal_t() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_t());
  }

  // int32 q = 3;
  if (this->_internal_q() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_q());
  }

  // .msg.ITEM_TYPE dt = 4;
  if (this->_internal_dt() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemValue::GetClassData() const { return &_class_data_; }


void ItemValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemValue*>(&to_msg);
  auto& from = static_cast<const ItemValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ItemValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_n().empty()) {
    _this->_internal_set_n(from._internal_n());
  }
  if (!from._internal_nid().empty()) {
    _this->_internal_set_nid(from._internal_nid());
  }
  if (from._internal_has_v()) {
    _this->_internal_mutable_v()->::msg::Variable::MergeFrom(
        from._internal_v());
  }
  if (from._internal_t() != 0) {
    _this->_internal_set_t(from._internal_t());
  }
  if (from._internal_q() != 0) {
    _this->_internal_set_q(from._internal_q());
  }
  if (from._internal_dt() != 0) {
    _this->_internal_set_dt(from._internal_dt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemValue::CopyFrom(const ItemValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ItemValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemValue::IsInitialized() const {
  return true;
}

void ItemValue::InternalSwap(ItemValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.n_, lhs_arena,
      &other->_impl_.n_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nid_, lhs_arena,
      &other->_impl_.nid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemValue, _impl_.dt_)
      + sizeof(ItemValue::_impl_.dt_)
      - PROTOBUF_FIELD_OFFSET(ItemValue, _impl_.v_)>(
          reinterpret_cast<char*>(&_impl_.v_),
          reinterpret_cast<char*>(&other->_impl_.v_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class BlockItemValue::_Internal {
 public:
};

BlockItemValue::BlockItemValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.BlockItemValue)
}
BlockItemValue::BlockItemValue(const BlockItemValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockItemValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.msgid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.msgid_ = from._impl_.msgid_;
  // @@protoc_insertion_point(copy_constructor:msg.BlockItemValue)
}

inline void BlockItemValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.msgid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockItemValue::~BlockItemValue() {
  // @@protoc_insertion_point(destructor:msg.BlockItemValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockItemValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void BlockItemValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockItemValue::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.BlockItemValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.msgid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockItemValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 MsgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ItemValue Values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockItemValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.BlockItemValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 MsgId = 1;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msgid(), target);
  }

  // repeated .msg.ItemValue Values = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.BlockItemValue)
  return target;
}

size_t BlockItemValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.BlockItemValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.ItemValue Values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 MsgId = 1;
  if (this->_internal_msgid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockItemValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockItemValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockItemValue::GetClassData() const { return &_class_data_; }


void BlockItemValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockItemValue*>(&to_msg);
  auto& from = static_cast<const BlockItemValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.BlockItemValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_msgid() != 0) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockItemValue::CopyFrom(const BlockItemValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.BlockItemValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockItemValue::IsInitialized() const {
  return true;
}

void BlockItemValue::InternalSwap(BlockItemValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.msgid_, other->_impl_.msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockItemValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::Variable*
Arena::CreateMaybeMessage< ::msg::Variable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Variable >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ItemValue*
Arena::CreateMaybeMessage< ::msg::ItemValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ItemValue >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::BlockItemValue*
Arena::CreateMaybeMessage< ::msg::BlockItemValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::BlockItemValue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
