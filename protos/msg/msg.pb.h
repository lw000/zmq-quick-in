// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace msg {
class BlockItemValue;
struct BlockItemValueDefaultTypeInternal;
extern BlockItemValueDefaultTypeInternal _BlockItemValue_default_instance_;
class ItemValue;
struct ItemValueDefaultTypeInternal;
extern ItemValueDefaultTypeInternal _ItemValue_default_instance_;
class Variable;
struct VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::BlockItemValue* Arena::CreateMaybeMessage<::msg::BlockItemValue>(Arena*);
template<> ::msg::ItemValue* Arena::CreateMaybeMessage<::msg::ItemValue>(Arena*);
template<> ::msg::Variable* Arena::CreateMaybeMessage<::msg::Variable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum ITEM_TYPE : int {
  EMPTY = 0,
  BOOL = 1,
  CHAR = 2,
  BYTE = 3,
  INT16 = 4,
  UINT16 = 5,
  INT32 = 6,
  UINT32 = 7,
  INT64 = 8,
  UINT64 = 9,
  FLOAT32 = 10,
  FLOAT64 = 11,
  STRING = 12,
  STREAM = 13,
  BLOB = 14,
  ITEM_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ITEM_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ITEM_TYPE_IsValid(int value);
constexpr ITEM_TYPE ITEM_TYPE_MIN = EMPTY;
constexpr ITEM_TYPE ITEM_TYPE_MAX = BLOB;
constexpr int ITEM_TYPE_ARRAYSIZE = ITEM_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEM_TYPE_descriptor();
template<typename T>
inline const std::string& ITEM_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ITEM_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ITEM_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ITEM_TYPE_descriptor(), enum_t_value);
}
inline bool ITEM_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ITEM_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ITEM_TYPE>(
    ITEM_TYPE_descriptor(), name, value);
}
// ===================================================================

class Variable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Variable) */ {
 public:
  inline Variable() : Variable(nullptr) {}
  ~Variable() override;
  explicit PROTOBUF_CONSTEXPR Variable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Variable(const Variable& from);
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variable& operator=(Variable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Variable& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kB = 1,
    kC = 2,
    kBt = 3,
    kWc = 4,
    kI16 = 5,
    kU16 = 6,
    kI32 = 7,
    kU32 = 8,
    kI64 = 9,
    kU64 = 10,
    kF32 = 11,
    kF64 = 12,
    kStr = 13,
    kT = 14,
    kStream = 15,
    kBlob = 16,
    VALUE_NOT_SET = 0,
  };

  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }
  inline void Swap(Variable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Variable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Variable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Variable& from) {
    Variable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Variable";
  }
  protected:
  explicit Variable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 1,
    kCFieldNumber = 2,
    kBtFieldNumber = 3,
    kWcFieldNumber = 4,
    kI16FieldNumber = 5,
    kU16FieldNumber = 6,
    kI32FieldNumber = 7,
    kU32FieldNumber = 8,
    kI64FieldNumber = 9,
    kU64FieldNumber = 10,
    kF32FieldNumber = 11,
    kF64FieldNumber = 12,
    kStrFieldNumber = 13,
    kTFieldNumber = 14,
    kStreamFieldNumber = 15,
    kBlobFieldNumber = 16,
  };
  // bool b = 1;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  bool b() const;
  void set_b(bool value);
  private:
  bool _internal_b() const;
  void _internal_set_b(bool value);
  public:

  // sint32 c = 2;
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  int32_t c() const;
  void set_c(int32_t value);
  private:
  int32_t _internal_c() const;
  void _internal_set_c(int32_t value);
  public:

  // uint32 bt = 3;
  bool has_bt() const;
  private:
  bool _internal_has_bt() const;
  public:
  void clear_bt();
  uint32_t bt() const;
  void set_bt(uint32_t value);
  private:
  uint32_t _internal_bt() const;
  void _internal_set_bt(uint32_t value);
  public:

  // sint32 wc = 4;
  bool has_wc() const;
  private:
  bool _internal_has_wc() const;
  public:
  void clear_wc();
  int32_t wc() const;
  void set_wc(int32_t value);
  private:
  int32_t _internal_wc() const;
  void _internal_set_wc(int32_t value);
  public:

  // sint32 i16 = 5;
  bool has_i16() const;
  private:
  bool _internal_has_i16() const;
  public:
  void clear_i16();
  int32_t i16() const;
  void set_i16(int32_t value);
  private:
  int32_t _internal_i16() const;
  void _internal_set_i16(int32_t value);
  public:

  // uint32 u16 = 6;
  bool has_u16() const;
  private:
  bool _internal_has_u16() const;
  public:
  void clear_u16();
  uint32_t u16() const;
  void set_u16(uint32_t value);
  private:
  uint32_t _internal_u16() const;
  void _internal_set_u16(uint32_t value);
  public:

  // sint32 i32 = 7;
  bool has_i32() const;
  private:
  bool _internal_has_i32() const;
  public:
  void clear_i32();
  int32_t i32() const;
  void set_i32(int32_t value);
  private:
  int32_t _internal_i32() const;
  void _internal_set_i32(int32_t value);
  public:

  // uint32 u32 = 8;
  bool has_u32() const;
  private:
  bool _internal_has_u32() const;
  public:
  void clear_u32();
  uint32_t u32() const;
  void set_u32(uint32_t value);
  private:
  uint32_t _internal_u32() const;
  void _internal_set_u32(uint32_t value);
  public:

  // sint64 i64 = 9;
  bool has_i64() const;
  private:
  bool _internal_has_i64() const;
  public:
  void clear_i64();
  int64_t i64() const;
  void set_i64(int64_t value);
  private:
  int64_t _internal_i64() const;
  void _internal_set_i64(int64_t value);
  public:

  // uint64 u64 = 10;
  bool has_u64() const;
  private:
  bool _internal_has_u64() const;
  public:
  void clear_u64();
  uint64_t u64() const;
  void set_u64(uint64_t value);
  private:
  uint64_t _internal_u64() const;
  void _internal_set_u64(uint64_t value);
  public:

  // float f32 = 11;
  bool has_f32() const;
  private:
  bool _internal_has_f32() const;
  public:
  void clear_f32();
  float f32() const;
  void set_f32(float value);
  private:
  float _internal_f32() const;
  void _internal_set_f32(float value);
  public:

  // double f64 = 12;
  bool has_f64() const;
  private:
  bool _internal_has_f64() const;
  public:
  void clear_f64();
  double f64() const;
  void set_f64(double value);
  private:
  double _internal_f64() const;
  void _internal_set_f64(double value);
  public:

  // string str = 13;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // int64 t = 14;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  int64_t t() const;
  void set_t(int64_t value);
  private:
  int64_t _internal_t() const;
  void _internal_set_t(int64_t value);
  public:

  // bytes stream = 15;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const std::string& stream() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stream(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stream();
  PROTOBUF_NODISCARD std::string* release_stream();
  void set_allocated_stream(std::string* stream);
  private:
  const std::string& _internal_stream() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream(const std::string& value);
  std::string* _internal_mutable_stream();
  public:

  // bytes blob = 16;
  bool has_blob() const;
  private:
  bool _internal_has_blob() const;
  public:
  void clear_blob();
  const std::string& blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blob();
  PROTOBUF_NODISCARD std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:msg.Variable)
 private:
  class _Internal;
  void set_has_b();
  void set_has_c();
  void set_has_bt();
  void set_has_wc();
  void set_has_i16();
  void set_has_u16();
  void set_has_i32();
  void set_has_u32();
  void set_has_i64();
  void set_has_u64();
  void set_has_f32();
  void set_has_f64();
  void set_has_str();
  void set_has_t();
  void set_has_stream();
  void set_has_blob();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool b_;
      int32_t c_;
      uint32_t bt_;
      int32_t wc_;
      int32_t i16_;
      uint32_t u16_;
      int32_t i32_;
      uint32_t u32_;
      int64_t i64_;
      uint64_t u64_;
      float f32_;
      double f64_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
      int64_t t_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ItemValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ItemValue) */ {
 public:
  inline ItemValue() : ItemValue(nullptr) {}
  ~ItemValue() override;
  explicit PROTOBUF_CONSTEXPR ItemValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemValue(const ItemValue& from);
  ItemValue(ItemValue&& from) noexcept
    : ItemValue() {
    *this = ::std::move(from);
  }

  inline ItemValue& operator=(const ItemValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemValue& operator=(ItemValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemValue* internal_default_instance() {
    return reinterpret_cast<const ItemValue*>(
               &_ItemValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ItemValue& a, ItemValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemValue& from) {
    ItemValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ItemValue";
  }
  protected:
  explicit ItemValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNFieldNumber = 1,
    kNidFieldNumber = 6,
    kVFieldNumber = 5,
    kTFieldNumber = 2,
    kQFieldNumber = 3,
    kDtFieldNumber = 4,
  };
  // string n = 1;
  void clear_n();
  const std::string& n() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_n(ArgT0&& arg0, ArgT... args);
  std::string* mutable_n();
  PROTOBUF_NODISCARD std::string* release_n();
  void set_allocated_n(std::string* n);
  private:
  const std::string& _internal_n() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_n(const std::string& value);
  std::string* _internal_mutable_n();
  public:

  // string nid = 6;
  void clear_nid();
  const std::string& nid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nid();
  PROTOBUF_NODISCARD std::string* release_nid();
  void set_allocated_nid(std::string* nid);
  private:
  const std::string& _internal_nid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nid(const std::string& value);
  std::string* _internal_mutable_nid();
  public:

  // .msg.Variable v = 5;
  bool has_v() const;
  private:
  bool _internal_has_v() const;
  public:
  void clear_v();
  const ::msg::Variable& v() const;
  PROTOBUF_NODISCARD ::msg::Variable* release_v();
  ::msg::Variable* mutable_v();
  void set_allocated_v(::msg::Variable* v);
  private:
  const ::msg::Variable& _internal_v() const;
  ::msg::Variable* _internal_mutable_v();
  public:
  void unsafe_arena_set_allocated_v(
      ::msg::Variable* v);
  ::msg::Variable* unsafe_arena_release_v();

  // int64 t = 2;
  void clear_t();
  int64_t t() const;
  void set_t(int64_t value);
  private:
  int64_t _internal_t() const;
  void _internal_set_t(int64_t value);
  public:

  // int32 q = 3;
  void clear_q();
  int32_t q() const;
  void set_q(int32_t value);
  private:
  int32_t _internal_q() const;
  void _internal_set_q(int32_t value);
  public:

  // .msg.ITEM_TYPE dt = 4;
  void clear_dt();
  ::msg::ITEM_TYPE dt() const;
  void set_dt(::msg::ITEM_TYPE value);
  private:
  ::msg::ITEM_TYPE _internal_dt() const;
  void _internal_set_dt(::msg::ITEM_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ItemValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nid_;
    ::msg::Variable* v_;
    int64_t t_;
    int32_t q_;
    int dt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BlockItemValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.BlockItemValue) */ {
 public:
  inline BlockItemValue() : BlockItemValue(nullptr) {}
  ~BlockItemValue() override;
  explicit PROTOBUF_CONSTEXPR BlockItemValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockItemValue(const BlockItemValue& from);
  BlockItemValue(BlockItemValue&& from) noexcept
    : BlockItemValue() {
    *this = ::std::move(from);
  }

  inline BlockItemValue& operator=(const BlockItemValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockItemValue& operator=(BlockItemValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockItemValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockItemValue* internal_default_instance() {
    return reinterpret_cast<const BlockItemValue*>(
               &_BlockItemValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockItemValue& a, BlockItemValue& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockItemValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockItemValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockItemValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockItemValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockItemValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockItemValue& from) {
    BlockItemValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockItemValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.BlockItemValue";
  }
  protected:
  explicit BlockItemValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMsgIdFieldNumber = 1,
  };
  // repeated .msg.ItemValue Values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::msg::ItemValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemValue >*
      mutable_values();
  private:
  const ::msg::ItemValue& _internal_values(int index) const;
  ::msg::ItemValue* _internal_add_values();
  public:
  const ::msg::ItemValue& values(int index) const;
  ::msg::ItemValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemValue >&
      values() const;

  // uint64 MsgId = 1;
  void clear_msgid();
  uint64_t msgid() const;
  void set_msgid(uint64_t value);
  private:
  uint64_t _internal_msgid() const;
  void _internal_set_msgid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.BlockItemValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemValue > values_;
    uint64_t msgid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Variable

// bool b = 1;
inline bool Variable::_internal_has_b() const {
  return value_case() == kB;
}
inline bool Variable::has_b() const {
  return _internal_has_b();
}
inline void Variable::set_has_b() {
  _impl_._oneof_case_[0] = kB;
}
inline void Variable::clear_b() {
  if (_internal_has_b()) {
    _impl_.value_.b_ = false;
    clear_has_value();
  }
}
inline bool Variable::_internal_b() const {
  if (_internal_has_b()) {
    return _impl_.value_.b_;
  }
  return false;
}
inline void Variable::_internal_set_b(bool value) {
  if (!_internal_has_b()) {
    clear_value();
    set_has_b();
  }
  _impl_.value_.b_ = value;
}
inline bool Variable::b() const {
  // @@protoc_insertion_point(field_get:msg.Variable.b)
  return _internal_b();
}
inline void Variable::set_b(bool value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:msg.Variable.b)
}

// sint32 c = 2;
inline bool Variable::_internal_has_c() const {
  return value_case() == kC;
}
inline bool Variable::has_c() const {
  return _internal_has_c();
}
inline void Variable::set_has_c() {
  _impl_._oneof_case_[0] = kC;
}
inline void Variable::clear_c() {
  if (_internal_has_c()) {
    _impl_.value_.c_ = 0;
    clear_has_value();
  }
}
inline int32_t Variable::_internal_c() const {
  if (_internal_has_c()) {
    return _impl_.value_.c_;
  }
  return 0;
}
inline void Variable::_internal_set_c(int32_t value) {
  if (!_internal_has_c()) {
    clear_value();
    set_has_c();
  }
  _impl_.value_.c_ = value;
}
inline int32_t Variable::c() const {
  // @@protoc_insertion_point(field_get:msg.Variable.c)
  return _internal_c();
}
inline void Variable::set_c(int32_t value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:msg.Variable.c)
}

// uint32 bt = 3;
inline bool Variable::_internal_has_bt() const {
  return value_case() == kBt;
}
inline bool Variable::has_bt() const {
  return _internal_has_bt();
}
inline void Variable::set_has_bt() {
  _impl_._oneof_case_[0] = kBt;
}
inline void Variable::clear_bt() {
  if (_internal_has_bt()) {
    _impl_.value_.bt_ = 0u;
    clear_has_value();
  }
}
inline uint32_t Variable::_internal_bt() const {
  if (_internal_has_bt()) {
    return _impl_.value_.bt_;
  }
  return 0u;
}
inline void Variable::_internal_set_bt(uint32_t value) {
  if (!_internal_has_bt()) {
    clear_value();
    set_has_bt();
  }
  _impl_.value_.bt_ = value;
}
inline uint32_t Variable::bt() const {
  // @@protoc_insertion_point(field_get:msg.Variable.bt)
  return _internal_bt();
}
inline void Variable::set_bt(uint32_t value) {
  _internal_set_bt(value);
  // @@protoc_insertion_point(field_set:msg.Variable.bt)
}

// sint32 wc = 4;
inline bool Variable::_internal_has_wc() const {
  return value_case() == kWc;
}
inline bool Variable::has_wc() const {
  return _internal_has_wc();
}
inline void Variable::set_has_wc() {
  _impl_._oneof_case_[0] = kWc;
}
inline void Variable::clear_wc() {
  if (_internal_has_wc()) {
    _impl_.value_.wc_ = 0;
    clear_has_value();
  }
}
inline int32_t Variable::_internal_wc() const {
  if (_internal_has_wc()) {
    return _impl_.value_.wc_;
  }
  return 0;
}
inline void Variable::_internal_set_wc(int32_t value) {
  if (!_internal_has_wc()) {
    clear_value();
    set_has_wc();
  }
  _impl_.value_.wc_ = value;
}
inline int32_t Variable::wc() const {
  // @@protoc_insertion_point(field_get:msg.Variable.wc)
  return _internal_wc();
}
inline void Variable::set_wc(int32_t value) {
  _internal_set_wc(value);
  // @@protoc_insertion_point(field_set:msg.Variable.wc)
}

// sint32 i16 = 5;
inline bool Variable::_internal_has_i16() const {
  return value_case() == kI16;
}
inline bool Variable::has_i16() const {
  return _internal_has_i16();
}
inline void Variable::set_has_i16() {
  _impl_._oneof_case_[0] = kI16;
}
inline void Variable::clear_i16() {
  if (_internal_has_i16()) {
    _impl_.value_.i16_ = 0;
    clear_has_value();
  }
}
inline int32_t Variable::_internal_i16() const {
  if (_internal_has_i16()) {
    return _impl_.value_.i16_;
  }
  return 0;
}
inline void Variable::_internal_set_i16(int32_t value) {
  if (!_internal_has_i16()) {
    clear_value();
    set_has_i16();
  }
  _impl_.value_.i16_ = value;
}
inline int32_t Variable::i16() const {
  // @@protoc_insertion_point(field_get:msg.Variable.i16)
  return _internal_i16();
}
inline void Variable::set_i16(int32_t value) {
  _internal_set_i16(value);
  // @@protoc_insertion_point(field_set:msg.Variable.i16)
}

// uint32 u16 = 6;
inline bool Variable::_internal_has_u16() const {
  return value_case() == kU16;
}
inline bool Variable::has_u16() const {
  return _internal_has_u16();
}
inline void Variable::set_has_u16() {
  _impl_._oneof_case_[0] = kU16;
}
inline void Variable::clear_u16() {
  if (_internal_has_u16()) {
    _impl_.value_.u16_ = 0u;
    clear_has_value();
  }
}
inline uint32_t Variable::_internal_u16() const {
  if (_internal_has_u16()) {
    return _impl_.value_.u16_;
  }
  return 0u;
}
inline void Variable::_internal_set_u16(uint32_t value) {
  if (!_internal_has_u16()) {
    clear_value();
    set_has_u16();
  }
  _impl_.value_.u16_ = value;
}
inline uint32_t Variable::u16() const {
  // @@protoc_insertion_point(field_get:msg.Variable.u16)
  return _internal_u16();
}
inline void Variable::set_u16(uint32_t value) {
  _internal_set_u16(value);
  // @@protoc_insertion_point(field_set:msg.Variable.u16)
}

// sint32 i32 = 7;
inline bool Variable::_internal_has_i32() const {
  return value_case() == kI32;
}
inline bool Variable::has_i32() const {
  return _internal_has_i32();
}
inline void Variable::set_has_i32() {
  _impl_._oneof_case_[0] = kI32;
}
inline void Variable::clear_i32() {
  if (_internal_has_i32()) {
    _impl_.value_.i32_ = 0;
    clear_has_value();
  }
}
inline int32_t Variable::_internal_i32() const {
  if (_internal_has_i32()) {
    return _impl_.value_.i32_;
  }
  return 0;
}
inline void Variable::_internal_set_i32(int32_t value) {
  if (!_internal_has_i32()) {
    clear_value();
    set_has_i32();
  }
  _impl_.value_.i32_ = value;
}
inline int32_t Variable::i32() const {
  // @@protoc_insertion_point(field_get:msg.Variable.i32)
  return _internal_i32();
}
inline void Variable::set_i32(int32_t value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:msg.Variable.i32)
}

// uint32 u32 = 8;
inline bool Variable::_internal_has_u32() const {
  return value_case() == kU32;
}
inline bool Variable::has_u32() const {
  return _internal_has_u32();
}
inline void Variable::set_has_u32() {
  _impl_._oneof_case_[0] = kU32;
}
inline void Variable::clear_u32() {
  if (_internal_has_u32()) {
    _impl_.value_.u32_ = 0u;
    clear_has_value();
  }
}
inline uint32_t Variable::_internal_u32() const {
  if (_internal_has_u32()) {
    return _impl_.value_.u32_;
  }
  return 0u;
}
inline void Variable::_internal_set_u32(uint32_t value) {
  if (!_internal_has_u32()) {
    clear_value();
    set_has_u32();
  }
  _impl_.value_.u32_ = value;
}
inline uint32_t Variable::u32() const {
  // @@protoc_insertion_point(field_get:msg.Variable.u32)
  return _internal_u32();
}
inline void Variable::set_u32(uint32_t value) {
  _internal_set_u32(value);
  // @@protoc_insertion_point(field_set:msg.Variable.u32)
}

// sint64 i64 = 9;
inline bool Variable::_internal_has_i64() const {
  return value_case() == kI64;
}
inline bool Variable::has_i64() const {
  return _internal_has_i64();
}
inline void Variable::set_has_i64() {
  _impl_._oneof_case_[0] = kI64;
}
inline void Variable::clear_i64() {
  if (_internal_has_i64()) {
    _impl_.value_.i64_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Variable::_internal_i64() const {
  if (_internal_has_i64()) {
    return _impl_.value_.i64_;
  }
  return int64_t{0};
}
inline void Variable::_internal_set_i64(int64_t value) {
  if (!_internal_has_i64()) {
    clear_value();
    set_has_i64();
  }
  _impl_.value_.i64_ = value;
}
inline int64_t Variable::i64() const {
  // @@protoc_insertion_point(field_get:msg.Variable.i64)
  return _internal_i64();
}
inline void Variable::set_i64(int64_t value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:msg.Variable.i64)
}

// uint64 u64 = 10;
inline bool Variable::_internal_has_u64() const {
  return value_case() == kU64;
}
inline bool Variable::has_u64() const {
  return _internal_has_u64();
}
inline void Variable::set_has_u64() {
  _impl_._oneof_case_[0] = kU64;
}
inline void Variable::clear_u64() {
  if (_internal_has_u64()) {
    _impl_.value_.u64_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t Variable::_internal_u64() const {
  if (_internal_has_u64()) {
    return _impl_.value_.u64_;
  }
  return uint64_t{0u};
}
inline void Variable::_internal_set_u64(uint64_t value) {
  if (!_internal_has_u64()) {
    clear_value();
    set_has_u64();
  }
  _impl_.value_.u64_ = value;
}
inline uint64_t Variable::u64() const {
  // @@protoc_insertion_point(field_get:msg.Variable.u64)
  return _internal_u64();
}
inline void Variable::set_u64(uint64_t value) {
  _internal_set_u64(value);
  // @@protoc_insertion_point(field_set:msg.Variable.u64)
}

// float f32 = 11;
inline bool Variable::_internal_has_f32() const {
  return value_case() == kF32;
}
inline bool Variable::has_f32() const {
  return _internal_has_f32();
}
inline void Variable::set_has_f32() {
  _impl_._oneof_case_[0] = kF32;
}
inline void Variable::clear_f32() {
  if (_internal_has_f32()) {
    _impl_.value_.f32_ = 0;
    clear_has_value();
  }
}
inline float Variable::_internal_f32() const {
  if (_internal_has_f32()) {
    return _impl_.value_.f32_;
  }
  return 0;
}
inline void Variable::_internal_set_f32(float value) {
  if (!_internal_has_f32()) {
    clear_value();
    set_has_f32();
  }
  _impl_.value_.f32_ = value;
}
inline float Variable::f32() const {
  // @@protoc_insertion_point(field_get:msg.Variable.f32)
  return _internal_f32();
}
inline void Variable::set_f32(float value) {
  _internal_set_f32(value);
  // @@protoc_insertion_point(field_set:msg.Variable.f32)
}

// double f64 = 12;
inline bool Variable::_internal_has_f64() const {
  return value_case() == kF64;
}
inline bool Variable::has_f64() const {
  return _internal_has_f64();
}
inline void Variable::set_has_f64() {
  _impl_._oneof_case_[0] = kF64;
}
inline void Variable::clear_f64() {
  if (_internal_has_f64()) {
    _impl_.value_.f64_ = 0;
    clear_has_value();
  }
}
inline double Variable::_internal_f64() const {
  if (_internal_has_f64()) {
    return _impl_.value_.f64_;
  }
  return 0;
}
inline void Variable::_internal_set_f64(double value) {
  if (!_internal_has_f64()) {
    clear_value();
    set_has_f64();
  }
  _impl_.value_.f64_ = value;
}
inline double Variable::f64() const {
  // @@protoc_insertion_point(field_get:msg.Variable.f64)
  return _internal_f64();
}
inline void Variable::set_f64(double value) {
  _internal_set_f64(value);
  // @@protoc_insertion_point(field_set:msg.Variable.f64)
}

// string str = 13;
inline bool Variable::_internal_has_str() const {
  return value_case() == kStr;
}
inline bool Variable::has_str() const {
  return _internal_has_str();
}
inline void Variable::set_has_str() {
  _impl_._oneof_case_[0] = kStr;
}
inline void Variable::clear_str() {
  if (_internal_has_str()) {
    _impl_.value_.str_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Variable::str() const {
  // @@protoc_insertion_point(field_get:msg.Variable.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline void Variable::set_str(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  _impl_.value_.str_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Variable.str)
}
inline std::string* Variable::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:msg.Variable.str)
  return _s;
}
inline const std::string& Variable::_internal_str() const {
  if (_internal_has_str()) {
    return _impl_.value_.str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Variable::_internal_set_str(const std::string& value) {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  _impl_.value_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* Variable::_internal_mutable_str() {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  return _impl_.value_.str_.Mutable(      GetArenaForAllocation());
}
inline std::string* Variable::release_str() {
  // @@protoc_insertion_point(field_release:msg.Variable.str)
  if (_internal_has_str()) {
    clear_has_value();
    return _impl_.value_.str_.Release();
  } else {
    return nullptr;
  }
}
inline void Variable::set_allocated_str(std::string* str) {
  if (has_value()) {
    clear_value();
  }
  if (str != nullptr) {
    set_has_str();
    _impl_.value_.str_.InitAllocated(str, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Variable.str)
}

// int64 t = 14;
inline bool Variable::_internal_has_t() const {
  return value_case() == kT;
}
inline bool Variable::has_t() const {
  return _internal_has_t();
}
inline void Variable::set_has_t() {
  _impl_._oneof_case_[0] = kT;
}
inline void Variable::clear_t() {
  if (_internal_has_t()) {
    _impl_.value_.t_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Variable::_internal_t() const {
  if (_internal_has_t()) {
    return _impl_.value_.t_;
  }
  return int64_t{0};
}
inline void Variable::_internal_set_t(int64_t value) {
  if (!_internal_has_t()) {
    clear_value();
    set_has_t();
  }
  _impl_.value_.t_ = value;
}
inline int64_t Variable::t() const {
  // @@protoc_insertion_point(field_get:msg.Variable.t)
  return _internal_t();
}
inline void Variable::set_t(int64_t value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:msg.Variable.t)
}

// bytes stream = 15;
inline bool Variable::_internal_has_stream() const {
  return value_case() == kStream;
}
inline bool Variable::has_stream() const {
  return _internal_has_stream();
}
inline void Variable::set_has_stream() {
  _impl_._oneof_case_[0] = kStream;
}
inline void Variable::clear_stream() {
  if (_internal_has_stream()) {
    _impl_.value_.stream_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Variable::stream() const {
  // @@protoc_insertion_point(field_get:msg.Variable.stream)
  return _internal_stream();
}
template <typename ArgT0, typename... ArgT>
inline void Variable::set_stream(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_stream()) {
    clear_value();
    set_has_stream();
    _impl_.value_.stream_.InitDefault();
  }
  _impl_.value_.stream_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Variable.stream)
}
inline std::string* Variable::mutable_stream() {
  std::string* _s = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:msg.Variable.stream)
  return _s;
}
inline const std::string& Variable::_internal_stream() const {
  if (_internal_has_stream()) {
    return _impl_.value_.stream_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Variable::_internal_set_stream(const std::string& value) {
  if (!_internal_has_stream()) {
    clear_value();
    set_has_stream();
    _impl_.value_.stream_.InitDefault();
  }
  _impl_.value_.stream_.Set(value, GetArenaForAllocation());
}
inline std::string* Variable::_internal_mutable_stream() {
  if (!_internal_has_stream()) {
    clear_value();
    set_has_stream();
    _impl_.value_.stream_.InitDefault();
  }
  return _impl_.value_.stream_.Mutable(      GetArenaForAllocation());
}
inline std::string* Variable::release_stream() {
  // @@protoc_insertion_point(field_release:msg.Variable.stream)
  if (_internal_has_stream()) {
    clear_has_value();
    return _impl_.value_.stream_.Release();
  } else {
    return nullptr;
  }
}
inline void Variable::set_allocated_stream(std::string* stream) {
  if (has_value()) {
    clear_value();
  }
  if (stream != nullptr) {
    set_has_stream();
    _impl_.value_.stream_.InitAllocated(stream, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Variable.stream)
}

// bytes blob = 16;
inline bool Variable::_internal_has_blob() const {
  return value_case() == kBlob;
}
inline bool Variable::has_blob() const {
  return _internal_has_blob();
}
inline void Variable::set_has_blob() {
  _impl_._oneof_case_[0] = kBlob;
}
inline void Variable::clear_blob() {
  if (_internal_has_blob()) {
    _impl_.value_.blob_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Variable::blob() const {
  // @@protoc_insertion_point(field_get:msg.Variable.blob)
  return _internal_blob();
}
template <typename ArgT0, typename... ArgT>
inline void Variable::set_blob(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_blob()) {
    clear_value();
    set_has_blob();
    _impl_.value_.blob_.InitDefault();
  }
  _impl_.value_.blob_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Variable.blob)
}
inline std::string* Variable::mutable_blob() {
  std::string* _s = _internal_mutable_blob();
  // @@protoc_insertion_point(field_mutable:msg.Variable.blob)
  return _s;
}
inline const std::string& Variable::_internal_blob() const {
  if (_internal_has_blob()) {
    return _impl_.value_.blob_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Variable::_internal_set_blob(const std::string& value) {
  if (!_internal_has_blob()) {
    clear_value();
    set_has_blob();
    _impl_.value_.blob_.InitDefault();
  }
  _impl_.value_.blob_.Set(value, GetArenaForAllocation());
}
inline std::string* Variable::_internal_mutable_blob() {
  if (!_internal_has_blob()) {
    clear_value();
    set_has_blob();
    _impl_.value_.blob_.InitDefault();
  }
  return _impl_.value_.blob_.Mutable(      GetArenaForAllocation());
}
inline std::string* Variable::release_blob() {
  // @@protoc_insertion_point(field_release:msg.Variable.blob)
  if (_internal_has_blob()) {
    clear_has_value();
    return _impl_.value_.blob_.Release();
  } else {
    return nullptr;
  }
}
inline void Variable::set_allocated_blob(std::string* blob) {
  if (has_value()) {
    clear_value();
  }
  if (blob != nullptr) {
    set_has_blob();
    _impl_.value_.blob_.InitAllocated(blob, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Variable.blob)
}

inline bool Variable::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Variable::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Variable::ValueCase Variable::value_case() const {
  return Variable::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ItemValue

// string n = 1;
inline void ItemValue::clear_n() {
  _impl_.n_.ClearToEmpty();
}
inline const std::string& ItemValue::n() const {
  // @@protoc_insertion_point(field_get:msg.ItemValue.n)
  return _internal_n();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ItemValue::set_n(ArgT0&& arg0, ArgT... args) {
 
 _impl_.n_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ItemValue.n)
}
inline std::string* ItemValue::mutable_n() {
  std::string* _s = _internal_mutable_n();
  // @@protoc_insertion_point(field_mutable:msg.ItemValue.n)
  return _s;
}
inline const std::string& ItemValue::_internal_n() const {
  return _impl_.n_.Get();
}
inline void ItemValue::_internal_set_n(const std::string& value) {
  
  _impl_.n_.Set(value, GetArenaForAllocation());
}
inline std::string* ItemValue::_internal_mutable_n() {
  
  return _impl_.n_.Mutable(GetArenaForAllocation());
}
inline std::string* ItemValue::release_n() {
  // @@protoc_insertion_point(field_release:msg.ItemValue.n)
  return _impl_.n_.Release();
}
inline void ItemValue::set_allocated_n(std::string* n) {
  if (n != nullptr) {
    
  } else {
    
  }
  _impl_.n_.SetAllocated(n, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.n_.IsDefault()) {
    _impl_.n_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ItemValue.n)
}

// int64 t = 2;
inline void ItemValue::clear_t() {
  _impl_.t_ = int64_t{0};
}
inline int64_t ItemValue::_internal_t() const {
  return _impl_.t_;
}
inline int64_t ItemValue::t() const {
  // @@protoc_insertion_point(field_get:msg.ItemValue.t)
  return _internal_t();
}
inline void ItemValue::_internal_set_t(int64_t value) {
  
  _impl_.t_ = value;
}
inline void ItemValue::set_t(int64_t value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:msg.ItemValue.t)
}

// int32 q = 3;
inline void ItemValue::clear_q() {
  _impl_.q_ = 0;
}
inline int32_t ItemValue::_internal_q() const {
  return _impl_.q_;
}
inline int32_t ItemValue::q() const {
  // @@protoc_insertion_point(field_get:msg.ItemValue.q)
  return _internal_q();
}
inline void ItemValue::_internal_set_q(int32_t value) {
  
  _impl_.q_ = value;
}
inline void ItemValue::set_q(int32_t value) {
  _internal_set_q(value);
  // @@protoc_insertion_point(field_set:msg.ItemValue.q)
}

// .msg.ITEM_TYPE dt = 4;
inline void ItemValue::clear_dt() {
  _impl_.dt_ = 0;
}
inline ::msg::ITEM_TYPE ItemValue::_internal_dt() const {
  return static_cast< ::msg::ITEM_TYPE >(_impl_.dt_);
}
inline ::msg::ITEM_TYPE ItemValue::dt() const {
  // @@protoc_insertion_point(field_get:msg.ItemValue.dt)
  return _internal_dt();
}
inline void ItemValue::_internal_set_dt(::msg::ITEM_TYPE value) {
  
  _impl_.dt_ = value;
}
inline void ItemValue::set_dt(::msg::ITEM_TYPE value) {
  _internal_set_dt(value);
  // @@protoc_insertion_point(field_set:msg.ItemValue.dt)
}

// .msg.Variable v = 5;
inline bool ItemValue::_internal_has_v() const {
  return this != internal_default_instance() && _impl_.v_ != nullptr;
}
inline bool ItemValue::has_v() const {
  return _internal_has_v();
}
inline void ItemValue::clear_v() {
  if (GetArenaForAllocation() == nullptr && _impl_.v_ != nullptr) {
    delete _impl_.v_;
  }
  _impl_.v_ = nullptr;
}
inline const ::msg::Variable& ItemValue::_internal_v() const {
  const ::msg::Variable* p = _impl_.v_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::Variable&>(
      ::msg::_Variable_default_instance_);
}
inline const ::msg::Variable& ItemValue::v() const {
  // @@protoc_insertion_point(field_get:msg.ItemValue.v)
  return _internal_v();
}
inline void ItemValue::unsafe_arena_set_allocated_v(
    ::msg::Variable* v) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v_);
  }
  _impl_.v_ = v;
  if (v) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ItemValue.v)
}
inline ::msg::Variable* ItemValue::release_v() {
  
  ::msg::Variable* temp = _impl_.v_;
  _impl_.v_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::Variable* ItemValue::unsafe_arena_release_v() {
  // @@protoc_insertion_point(field_release:msg.ItemValue.v)
  
  ::msg::Variable* temp = _impl_.v_;
  _impl_.v_ = nullptr;
  return temp;
}
inline ::msg::Variable* ItemValue::_internal_mutable_v() {
  
  if (_impl_.v_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Variable>(GetArenaForAllocation());
    _impl_.v_ = p;
  }
  return _impl_.v_;
}
inline ::msg::Variable* ItemValue::mutable_v() {
  ::msg::Variable* _msg = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:msg.ItemValue.v)
  return _msg;
}
inline void ItemValue::set_allocated_v(::msg::Variable* v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.v_;
  }
  if (v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v);
    if (message_arena != submessage_arena) {
      v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.v_ = v;
  // @@protoc_insertion_point(field_set_allocated:msg.ItemValue.v)
}

// string nid = 6;
inline void ItemValue::clear_nid() {
  _impl_.nid_.ClearToEmpty();
}
inline const std::string& ItemValue::nid() const {
  // @@protoc_insertion_point(field_get:msg.ItemValue.nid)
  return _internal_nid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ItemValue::set_nid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.ItemValue.nid)
}
inline std::string* ItemValue::mutable_nid() {
  std::string* _s = _internal_mutable_nid();
  // @@protoc_insertion_point(field_mutable:msg.ItemValue.nid)
  return _s;
}
inline const std::string& ItemValue::_internal_nid() const {
  return _impl_.nid_.Get();
}
inline void ItemValue::_internal_set_nid(const std::string& value) {
  
  _impl_.nid_.Set(value, GetArenaForAllocation());
}
inline std::string* ItemValue::_internal_mutable_nid() {
  
  return _impl_.nid_.Mutable(GetArenaForAllocation());
}
inline std::string* ItemValue::release_nid() {
  // @@protoc_insertion_point(field_release:msg.ItemValue.nid)
  return _impl_.nid_.Release();
}
inline void ItemValue::set_allocated_nid(std::string* nid) {
  if (nid != nullptr) {
    
  } else {
    
  }
  _impl_.nid_.SetAllocated(nid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nid_.IsDefault()) {
    _impl_.nid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.ItemValue.nid)
}

// -------------------------------------------------------------------

// BlockItemValue

// uint64 MsgId = 1;
inline void BlockItemValue::clear_msgid() {
  _impl_.msgid_ = uint64_t{0u};
}
inline uint64_t BlockItemValue::_internal_msgid() const {
  return _impl_.msgid_;
}
inline uint64_t BlockItemValue::msgid() const {
  // @@protoc_insertion_point(field_get:msg.BlockItemValue.MsgId)
  return _internal_msgid();
}
inline void BlockItemValue::_internal_set_msgid(uint64_t value) {
  
  _impl_.msgid_ = value;
}
inline void BlockItemValue::set_msgid(uint64_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:msg.BlockItemValue.MsgId)
}

// repeated .msg.ItemValue Values = 2;
inline int BlockItemValue::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int BlockItemValue::values_size() const {
  return _internal_values_size();
}
inline void BlockItemValue::clear_values() {
  _impl_.values_.Clear();
}
inline ::msg::ItemValue* BlockItemValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:msg.BlockItemValue.Values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemValue >*
BlockItemValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:msg.BlockItemValue.Values)
  return &_impl_.values_;
}
inline const ::msg::ItemValue& BlockItemValue::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::msg::ItemValue& BlockItemValue::values(int index) const {
  // @@protoc_insertion_point(field_get:msg.BlockItemValue.Values)
  return _internal_values(index);
}
inline ::msg::ItemValue* BlockItemValue::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::msg::ItemValue* BlockItemValue::add_values() {
  ::msg::ItemValue* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:msg.BlockItemValue.Values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemValue >&
BlockItemValue::values() const {
  // @@protoc_insertion_point(field_list:msg.BlockItemValue.Values)
  return _impl_.values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::ITEM_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ITEM_TYPE>() {
  return ::msg::ITEM_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
